#!/bin/bash
SCRIPTDIR=$( (cd -P $(dirname $0) && pwd) )

testmode=""
if [[ "$1" == "-t" ]] ; then
    testmode=$1
    shift
fi

month=$1

solrmarc_dir=$SCRIPTDIR/bin/solrmarc3
solrmarc_bin_dir="$SCRIPTDIR/bin"
solrmarc_jar_name=`ls -t $solrmarc_dir  | egrep "solrmarc_core" | egrep "[.]jar$" | head -1`
solrmarc_jar="$solrmarc_dir/$solrmarc_jar_name"
log4j_dir="$solrmarc_dir/lib"
log4j_jar_name=`ls -t $log4j_dir  | egrep "^log4j" | egrep "[.]jar$" | head -1`
log4j_jar="$log4j_dir/$log4j_jar_name"

JAVACLASSPATH="$SCRIPTDIR/build/cnhi_build.jar:$solrmarc_jar:$log4j_jar"
echo $JAVACLASSPATH

if [[ "${month}" = "" ]]; then
    month=`date -d "-1 month" "+%Y-%m"`
fi

#month=2022-02
firstday=`date -d "${month}-01"  "+%Y-%m-%d"`
lastday=`date -d "${month}-01 + 1 month - 1 day"  "+%Y-%m-%d"`


#Check for months data from sirsi
inputdir="$SCRIPTDIR/data/incoming/tracksys"
inputfile="$inputdir/tracksys_${month}.tsv"
outputdir="$SCRIPTDIR/data/to_IRA/tracksys"
outputname="tracksys_${month}_IRA.tsv"
outputfile="$outputdir/$outputname"
bucketname="s3://circdata-ingest-production-ira/to-ira/tracksys"

#define the needed AWS environment variables
if [[ "$AWS" == "" ]] ; then
    echo "Environment variable $""AWS must be defined as executable for aws command-line interface"
    exit 1
fi

#check for the needed JAVA environment variables
if [[ "$JAVA" == "" ]] ; then
    echo "Environment variable $""JAVA must be defined as executable for java version 1.8 or greater"
    exit 1
fi

mkdir -p $inputdir
mkdir -p $outputdir
mkdir -p data/userid
touch $SCRIPTDIR/data/records_index.txt
touch $SCRIPTDIR/data/callnum2catkey.txt

if [[ -e "$inputfile" ]] ; then
    echo "Input file $inputfile already exists ... skipping forward"
else
    #Get months data from tracksys
    echo curl "https://tracksys-api-ws.internal.lib.virginia.edu/api/circulation?from=$firstday&to=$lastday"
    curl -s "https://tracksys-api-ws.internal.lib.virginia.edu/api/circulation?from=$firstday&to=$lastday" | $SCRIPTDIR/tracksys_json2tsv > $inputfile
    result=$?
    if [[ "$result" != "0" ]] ; then
        exit $result
    fi
fi

#lookup userids for @virginia.edu users
ils_url=`$SCRIPTDIR/bin/resolve-private.ksh ils-connector-ws.private.production 2> /dev/null | sed -e 's/^[^:]*: //'`
if [[ ! "$ils_url" =~ ^[0-9]*[.][0-9]*[.][0-9]*[.][0-9]*$ ]]; then 
    echo "Error:  ILS-connector URL lookup failed: $ils_url" 
    exit 1
fi

if [[ "$testmode" != "-t" ]] ; then
    if [[ -e "$outputfile" ]] ; then
      echo "Output file $outputfile already exists.  I done did this.  exiting"
      exit 0
    fi
fi

let cnt=0
for userid in `cat $inputfile | egrep "@virginia.edu" | cut -f 3 | uniq | sort | uniq | sed -e 's/@virginia.edu//'`
    do 
        #echo curl "http://${ils_url}:8080/v4/users/$userid" ">" $SCRIPTDIR/data/userid/${userid}.data
        curl -s "http://${ils_url}:8080/v4/users/$userid" > $SCRIPTDIR/data/userid/${userid}.data
        ret=$?
        if [[ $ret != "0" ]] ; then 
            echo "Cannot resolve URL :  ${ils_url}"
            exit 1
        fi
        let cnt+=1
    done

echo "looked up $cnt userids in ILS-connector"

declare -A RECCNTS
let cnt=0
cat $SCRIPTDIR/data/incoming/tracksys/tracksys_${month}.tsv  | cut -f 6 | sort | uniq > $SCRIPTDIR/data/incoming/tracksys/tracksys_${month}_callnums.txt
rm -f $SCRIPTDIR/data/record_list_${month}.txt

#Find sirsi records corresponding to the provided call numbers
    while read callnum  
    do 
        if [[ "$callnum" != "" ]] ; then  
            ret=`$SCRIPTDIR/record_lookup_by_callnum "title" "$callnum" $SCRIPTDIR/data/record_list_${month}.txt`
            #echo "$ret"  
            if [[ "${RECCNTS[$ret]}" == "" ]] ; then let RECCNTS[$ret]=1; else  let RECCNTS[$ret]+=1; fi
            let cnt+=1
            #echo $cnt $ret $callnum
        fi
    done < $SCRIPTDIR/data/incoming/tracksys/tracksys_${month}_callnums.txt

echo     "Total callnums looked up :  $cnt"
for i in ${!RECCNTS[@]}
do 
    echo "  matched with $i records:  ${RECCNTS[$i]}"
done

rm -f $SCRIPTDIR/data/callnum2catkey_${month}.txt
rm -f $SCRIPTDIR/data/records_index_${month}.txt

echo " Indexing $cnt MARC records"
cat $SCRIPTDIR/data/record_list_${month}.txt | sort | uniq > $SCRIPTDIR/data/record_list_${month}_sort.txt 

while read callnum filename
do 
    idswritten=`cat "$SCRIPTDIR/data/callnum_by_both/$filename" | $solrmarc_bin_dir/getrecord -id | tr '\n' ':'`
    echo "$callnum=$idswritten" >>  $SCRIPTDIR/data/callnum2catkey_${month}.txt
    ( cat $SCRIPTDIR/data/callnum_by_both/$filename |   $JAVA -jar $solrmarc_jar IndexDriver -config user_data.properties | egrep -v '^(DEBUG| INFO|WARN)' | sort >> $SCRIPTDIR/data/records_index_${month}.txt ) 2>&1
#        echo $callnum
done < $SCRIPTDIR/data/record_list_${month}_sort.txt

catkeys=`cat $SCRIPTDIR/data/record_list_${month}_sort.txt |
    while read callnum filename
    do 
        cat "$SCRIPTDIR/data/callnum_by_both/$filename" | $solrmarc_bin_dir/getrecord -id
    done | 
        tr '\n' '|' | sed -e 's/\|$//'`

#echo ${catkeys}
egrep -v "^($catkeys) :" $SCRIPTDIR/data/records_index.txt | sort - $SCRIPTDIR/data/records_index_${month}.txt > $SCRIPTDIR/data/records_index.txt.sort
if [[ -s  $SCRIPTDIR/data/records_index.txt.sort ]] ; then
    mv $SCRIPTDIR/data/records_index.txt $SCRIPTDIR/data/records_index.txt.bak
    mv $SCRIPTDIR/data/records_index.txt.sort $SCRIPTDIR/data/records_index.txt
fi

cat $SCRIPTDIR/data/callnum2catkey_${month}.txt | sort - $SCRIPTDIR/data/callnum2catkey.txt -o $SCRIPTDIR/data/callnum2catkey.txt

cd $SCRIPTDIR

echo "Running ReadUserResearchData java program to generate the output file to send to IRA"
$JAVA -cp $JAVACLASSPATH org.solrmarc.mixin.ReadUserResearchData -d bin/solrmarc3 -IRA  -s tracksys-uva "$inputfile" "$outputfile"

result=$?
if [[ "$result" != "0" ]] ; then
    echo "Non-zero return code from ReadUserReserchData java program"
    exit $result
fi

echo "Uploading $outputfile to AWS S3 bucket"
if [[ "$testmode" == "-t" ]] ; then
    echo $AWS s3 cp $outputfile "${bucketname}/${outputname}"
else
    $AWS s3 cp $outputfile "${bucketname}/${outputname}" 2>&1 | egrep -v "SNIMissingWarning"
fi


